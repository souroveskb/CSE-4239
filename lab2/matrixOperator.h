/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _MATRIXOPERATOR_H_RPCGEN
#define _MATRIXOPERATOR_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


struct Matrix {
	int nRows;
	int nColumns;
	double data[100];
};
typedef struct Matrix Matrix;

struct Massage {
	Matrix A;
	Matrix B;
};
typedef struct Massage Massage;

#define MATRIX_OPERATIONS 0x123456
#define MATRIX_VERSION 1

#if defined(__STDC__) || defined(__cplusplus)
#define addition 1
extern  Matrix * addition_1(Massage *, CLIENT *);
extern  Matrix * addition_1_svc(Massage *, struct svc_req *);
#define multiplication 2
extern  Matrix * multiplication_1(Massage *, CLIENT *);
extern  Matrix * multiplication_1_svc(Massage *, struct svc_req *);
#define transpose 3
extern  Matrix * transpose_1(Massage *, CLIENT *);
extern  Matrix * transpose_1_svc(Massage *, struct svc_req *);
#define inverse 4
extern  Matrix * inverse_1(Massage *, CLIENT *);
extern  Matrix * inverse_1_svc(Massage *, struct svc_req *);
extern int matrix_operations_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define addition 1
extern  Matrix * addition_1();
extern  Matrix * addition_1_svc();
#define multiplication 2
extern  Matrix * multiplication_1();
extern  Matrix * multiplication_1_svc();
#define transpose 3
extern  Matrix * transpose_1();
extern  Matrix * transpose_1_svc();
#define inverse 4
extern  Matrix * inverse_1();
extern  Matrix * inverse_1_svc();
extern int matrix_operations_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_Matrix (XDR *, Matrix*);
extern  bool_t xdr_Massage (XDR *, Massage*);

#else /* K&R C */
extern bool_t xdr_Matrix ();
extern bool_t xdr_Massage ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_MATRIXOPERATOR_H_RPCGEN */
